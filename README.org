* SourceCodex
A very simple platform for searching callers/callees (and terms) in code projects

** Goals
- search for callers/callees and patterns
- fast enough for incremental completion
- simple
- easy to extend for languages besides CoffeeScript
- command line tool
- zero admin (command line option to monitor project changes means no service needed)
- small number of dependencies (POSIX/cygwin and node.js)

** USAGE
#+BEGIN_SRC example
sourcecodex [-h | -d | -s PATTERN | -m | -u] [DIR]
DIR is the directory containing the files to index.
If DIR is given, a new ".sourcecodex" database is created
in DIR if it does not exist
OPTIONS:
  -h            Print this message
  -d            Delete the .sourcecodex database
  -i PATTERN    Ignore files matching pattern
  -s PATTERN    Search for token pattern in files and return matched lines in grep format
  -p PATTERN    Search for prefix token pattern in files and return matched lines in grep format
  -l LIM OFF    Limit the number of search results to LIM and discard the first OFF
  -t PATTERN    Find all tokens matching pattern
  -v            Inccrease verbosity
  -q            Turn off progress notifications
  -n            Notify of changes (implies -q): 'DELETE'|'CREATE'|'MODIFY' FILE
  -u            Update
  -m            Update and continue monitoring for changes
  -c            Index CoffeeScript callers and callees
  --callers F   List call sites of F: FILE:LINE:COL:FUNC:CONTENTS
  --callees F   List F's call sites: FILE:LINE:COL:FUNC:CONTENTS
  --defs        List defs: FILE:LINE:COL:FUNC:CONTENTS
#+END_SRC

** Architecture
- built on SQLite
  - allows different programs to use the same database
  - allows background updating
  - other programs can access/change the database
- extensible
  - update/monitor command prints events like inotifywatch (CREATE/MODIFY/DELETE file)
    - you can pipe/tee the output to other programs
  - other programs can query/change the database

** Todo
- support full regexp search
  - maybe just narrow down the lines with a pattern and then pump them through grep
  - maybe based on Russ Cox's work
- remove POSIX deps (add bat file for search command)

** References
- Other code search tools: http://beyondgrep.com/more-tools/
- Russ Cox's work
  - codesearch: https://code.google.com/p/codesearch/
  - trigram analysis: http://swtch.com/~rsc/regexp/regexp4.html
- beagrep: http://baohaojun.github.io/beagrep.html
  - beagrep looks very similar, but the author says it's very difficult to install on windows
- some similar tools do not do callers/callees
  - (opengrok, gnu global): https://github.com/OpenGrok/OpenGrok/wiki/Comparison-with-Similar-Tools

** Schema
There are 3 main tables: files, lines, and lines_terms.

#+BEGIN_SRC SQL
create table files (path primary key, stamp);
create virtual table lines using fts4 (path, line_number, line);
create virtual table lines_terms using fts4aux(lines);
#+END_SRC

Files tracks the indexed files.

Lines stores all of the lines of the tracked files and maintains a full-text index.

Lines_terms lets you access the internals of the index like the terms (tokens).

Here are the CoffeeScript call graph tables:

#+BEGIN_SRC SQL
create table coffee_defs(file, code, line_number, col);
create table coffee_calls(file, code, call, line_number, col);
#+END_SRC
