#!/bin/bash
#set -x
app=$(dirname $(realpath $0))
action=usage
option=''
V=0
dirChecked=''
limit=''
coffee=()

verbose() {
    if [ "$1" -le "$V" ]; then
        shift
        echo "$@" 1>&2
    fi
}

checkDir() {
    if [ -z "$dirChecked" ]; then
        if [ -z "$dir" ]; then
            usage "No directory given"
        fi
        cd "$dir"
        dirChecked=true
    fi
}

coffee() {
    checkDir
    exec coffee $(cygpath -w "$app/watch.coffee") "${coffee[@]}" .
}

scrub() {
    checkDir
    rm -f ".sourcecodex"
}

prefixSearch() {
    checkDir
    verbose 1 Search pattern: "$pattern", dir: "$dir"
    sqlite3 .sourcecodex "select file || ':' || line_number || ':' || line from lines where line match '$pattern*' $limit"
}

middleSearch() {
    checkDir
    verbose 1 Search pattern: "$pattern", dir: "$dir"
    cmd=''
    terms=$(sqlite3 .sourcecodex "select term from lines_terms where term glob '*$pattern*'")
    for t in $terms; do
        if [ -n "$cmd" ]; then
            cmd="$cmd union select rowid, file, line_number, line from lines where line match '$t'"
        else
            cmd="select rowid, file, line_number, line from lines where line match '$t'"
        fi
    done
    if [ -n "$terms" ]; then
        #echo SQL: "$cmd"
        echo TERMS: $terms
        sqlite3 .sourcecodex "select file || ':' || line_number || ':' || line from ($cmd) group by rowid order by rowid $limit"
    else
        echo NO TERMS
    fi
}

callers() {
    checkDir
    sqlite3 .sourcecodex "select file || ':' || line_number || ':' || col || ':' || code || ':' || line from calls, lines using(file,line_number) where call = '$func' order by calls.rowid"
}

callees() {
    checkDir
    sqlite3 .sourcecodex "select file || ':' || line_number || ':' || col || ':' || code || ':' || call || ':' || line from calls, lines using(file,line_number) where code = '$func' order by calls.rowid"
}

defs() {
    checkDir
    sqlite3 .sourcecodex "select file || ':' || line_number || ':' || col || ':' || code || ':' || line from defs, lines using(file,line_number) group by file,code order by defs.rowid"
}

setAction() {
    if [ -n "$option" ]; then
        usage "Attempt to use two actions at once, $option and $1"
    fi
    option=$1
    action=$2
}

processArgs() {
    while [ "$#" != 0 ]; do
        case "$1" in
            -h)
                usage
                ;;
            -d)
                setAction -d scrub
                ;;
            -p)
                setAction -p prefixSearch
                pattern="$2"
                shift
                ;;
            -s)
                setAction -p middleSearch
                pattern="$2"
                shift
                ;;
            -i)
                coffee[${#coffee[*]}]=-i
                coffee[${#coffee[*]}]="$2"
                shift
                ;;
            -v)
                V=$((V + 1))
                coffee[${#coffee[*]}]=-v
                ;;
            -q)
                coffee[${#coffee[*]}]=-q
                ;;
            -n)
                coffee[${#coffee[*]}]=-n
                ;;
            -l)
                limit="limit $2 offset $3"
                shift
                shift
                ;;
            -m)
                setAction -m coffee
                ;;
            -u)
                coffee[${#coffee[*]}]=-u
                setAction -u coffee
                ;;
            -r)
                coffee[${#coffee[*]}]=-r
                ;;
            -c)
                coffee[${#coffee[*]}]=-c
                ;;
            -j)
                coffee[${#coffee[*]}]=-j
                ;;
            --callers)
                setAction --callers callers
                func="$2"
                shift
                ;;
            --calls)
                setAction --callees callees
                func="$2"
                shift
                ;;
            --defs)
                setAction --defs defs
                ;;
            -*)
                usage "Unknown argument: $1"
                ;;
            *)
                dir="$1"
                ;;
        esac
        shift
    done
    if [ -n "$coffee" -a "$action" != "coffee" ]; then
        usage "Options require -u or -m"
    fi
}

usage() {
    if [ $# != 0 ]; then
        echo $*
        echo
    fi
    cat <<EOF
Usage: $(basename $0) [ -h | -i PATTERN | -s PATTERN | -p PATTERN | -l LIM OFF | -t PATTERN | -v | -q | -n | -d | -r | -u | -m | -c | -j | --callers F | --calls F | --defs ] [DIR]
DIR is the directory containing the files to index.
If DIR is given, a new ".sourcecodex" database is created
in DIR if it does not exist
OPTIONS:
  -h            Print this message
  -i PATTERN    Ignore files matching pattern
  -s PATTERN    Search for token pattern in files and return matched lines in grep format
  -p PATTERN    Search for prefix token pattern in files and return matched lines in grep format
  -l LIM OFF    Limit the number of search results to LIM and discard the first OFF
  -t PATTERN    Find all tokens matching pattern
  -v            Inccrease verbosity
  -q            Turn off progress notifications
  -n            Notify of changes (implies -q): 'DELETE'|'CREATE'|'MODIFY' FILE
  -d            Delete the .sourcecodex database
  -r            Delete and rebuild database
  -u            Update and then exit
  -m            Update and continue monitoring for changes
  -c            Index CoffeeScript callers and callees
  -j            Index JavaScript callers and callees
  --callers F   List call sites of F: FILE:LINE:COL:FUNC:CONTENTS
  --calls F     List F's call sites: FILE:LINE:COL:FUNC:CONTENTS
  --defs        List defs: FILE:LINE:COL:FUNC:CONTENTS
EOF
    exit 1
}

processArgs "$@"
$action
